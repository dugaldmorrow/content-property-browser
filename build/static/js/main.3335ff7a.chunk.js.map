{"version":3,"sources":["App.js","index.js"],"names":["App","state","loading","start","limit","rowsPerPage","isPrimitive","value","type","renderValue","toString","JSON","stringify","renderTable","rows","contentPropertyData","results","forEach","result","push","cells","key","content","version","number","caption","head","width","defaultPage","loadingSpinnerSize","isLoading","isFixedSize","defaultSortKey","defaultSortOrder","onSort","console","log","onSetPage","this","setState","AP","context","getContext","contentId","confluence","id","request","url","error","success","responseJson","parse","PureComponent","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gOAKqBA,E,4MAEnBC,MAAQ,CACNC,SAAS,EACTC,MAAO,EACPC,MAAO,IACPC,YAAa,G,EAuCfC,YAAc,SAACC,GACb,IAAMC,SAAcD,EACpB,MAAiB,WAATC,GAA8B,WAATA,GAA8B,YAATA,G,EAGpDC,YAAc,SAACF,GACb,OAAI,EAAKD,cACA,8BAAOC,EAAMG,YAEb,6BAAMC,KAAKC,UAAUL,EAAO,KAAM,K,EAI7CM,YAAc,WACZ,IAeMC,EAAO,GAgBb,OAfA,EAAKb,MAAMc,oBAAoBC,QAAQC,SAAQ,SAAAC,GAC7CJ,EAAKK,KAAK,CACRC,MAAO,CAAC,CACNC,IAAK,MACLC,QAASJ,EAAOG,KACf,CACDA,IAAK,QACHC,QAAS,EAAKb,YAAYS,EAAOX,QAClC,CACDc,IAAK,UACHC,QAASJ,EAAOK,QAAQC,cAM9B,kBAAC,IAAD,CACEC,QAAQ,qBACRC,KAlCS,CACXN,MAAO,CAAC,CACNC,IAAK,MACLC,QAAS,MACTK,MAAO,GACN,CACDN,IAAK,QACHC,QAAS,QACTK,MAAO,GACR,CACDN,IAAK,UACHC,QAAS,UACTK,MAAO,KAuBTb,KAAMA,EACNT,YAAa,EAAKJ,MAAMI,YACxBuB,YAAa,EACbC,mBAAmB,QACnBC,UAAW,EAAK7B,MAAMC,QACtB6B,aAAW,EACXC,eAAe,MACfC,iBAAiB,MACjBC,OAAQ,kBAAMC,QAAQC,IAAI,WAC1BC,UAAW,kBAAMF,QAAQC,IAAI,iB,kEA9Fd,IAAD,OAClBE,KAAKC,SAAS,CACZrC,SAAS,IAEPsC,IACFA,GAAGC,QAAQC,YAAW,SAAAD,GACpBN,QAAQC,IAAI,WAAYK,GACxB,IAAME,EAAYF,EAAQG,WAAWtB,QAAQuB,GAC7CL,GAAGM,QAAQ,CACTC,IAAI,qBAAD,OAAuBJ,EAAvB,2BAAmD,EAAK1C,MAAME,MAA9D,kBAA6E,EAAKF,MAAMG,OAC3F4C,MAAO,SAACA,GACN,EAAKT,SAAS,CACZS,MAAOA,EACP9C,SAAS,KAGb+C,QAAS,SAACC,GACR,IACE,EAAKX,SAAS,CACZrC,SAAS,IAEX,IAAMa,EAAsBJ,KAAKwC,MAAMD,GACvC,EAAKX,SAAS,CACZxB,oBAAqBA,IAEvB,MAAOiC,GACP,EAAKT,SAAS,CACZS,MAAOA,a,+BAyEnB,OACE,6BACGV,KAAKrC,MAAMc,oBAAsBuB,KAAKzB,cAAgB,U,GA/G9BuC,iBCDjCC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U","file":"static/js/main.3335ff7a.chunk.js","sourcesContent":["import React, { PureComponent } from 'react';\nimport DynamicTable from '@atlaskit/dynamic-table';\n\n/* global AP */\n\nexport default class App extends PureComponent {\n\n  state = {\n    loading: false,\n    start: 0,\n    limit: 100,\n    rowsPerPage: 5\n  };\n\n  componentDidMount() {\n    this.setState({\n      loading: true\n    });\n    if (AP) {\n      AP.context.getContext(context => {\n        console.log('context:', context);\n        const contentId = context.confluence.content.id;\n        AP.request({\n          url: `/rest/api/content/${contentId}/property?start=${this.state.start}&limit=${this.state.limit}`,\n          error: (error) => {\n            this.setState({\n              error: error,\n              loading: false\n            });\n          },\n          success: (responseJson) => {\n            try {\n              this.setState({\n                loading: false\n              });\n              const contentPropertyData = JSON.parse(responseJson);\n              this.setState({\n                contentPropertyData: contentPropertyData\n              });\n            } catch (error) {\n              this.setState({\n                error: error\n              });\n            }\n          }\n        });\n      });\n    }\n  };\n\n  isPrimitive = (value) => {\n    const type = typeof value;\n    return (type === 'string' || type === 'number' || type === 'boolean');\n  };\n\n  renderValue = (value) => {\n    if (this.isPrimitive()) {\n      return <span>{value.toString()}</span>;\n    } else {\n      return <pre>{JSON.stringify(value, null, 2)}</pre>;\n    }\n  };\n\n  renderTable = () => {\n    const head = {\n      cells: [{\n        key: \"key\",\n        content: \"Key\",\n        width: 2\n      }, {\n        key: \"value\",\n          content: \"Value\",\n          width: 6\n      }, {\n        key: \"version\",\n          content: \"Version\",\n          width: 1\n      }]\n    };\n    const rows = [];\n    this.state.contentPropertyData.results.forEach(result => {\n      rows.push({\n        cells: [{\n          key: \"key\",\n          content: result.key\n        }, {\n          key: \"value\",\n            content: this.renderValue(result.value)\n        }, {\n          key: \"version\",\n            content: result.version.number\n        }]\n      });\n    });\n    \n    return (\n      <DynamicTable\n        caption=\"Content properties\"\n        head={head}\n        rows={rows}\n        rowsPerPage={this.state.rowsPerPage}\n        defaultPage={1}\n        loadingSpinnerSize=\"large\"\n        isLoading={this.state.loading}\n        isFixedSize\n        defaultSortKey=\"key\"\n        defaultSortOrder=\"ASC\"\n        onSort={() => console.log('onSort')}\n        onSetPage={() => console.log('onSetPage')}\n      />\n    );\n  }\n\n  render() {\n    return (\n      <div>\n        {this.state.contentPropertyData ? this.renderTable() : null}\n      </div>\n    );\n  }\n\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}